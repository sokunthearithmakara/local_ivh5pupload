{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["/* eslint-disable complexity */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for the H5P Upload plugin.\n *\n * @module     local_ivh5pupload/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Base from 'mod_interactivevideo/type/base';\nimport {notifyFilterContentUpdated as notifyFilter} from 'core_filters/events';\n\nexport default class H5pUpload extends Base {\n    /**\n     * Render the container for the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderContainer(annotation) {\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        super.renderContainer(annotation);\n        if (annotation.completiontracking !== 'view') {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $message.find('#title .info').remove();\n            $completiontoggle.before(`<i class=\"bi bi-info-circle-fill mr-2 info\" data-toggle=\"tooltip\"\n            data-container=\"#wrapper\" data-trigger=\"hover\"\n            data-title=\"${M.util.get_string(\"completionon\" + annotation.completiontracking, \"mod_interactivevideo\")}\"></i>`);\n            if (annotation.completed) {\n                return;\n            }\n            setTimeout(function() {\n                $message.find('[data-toggle=\"tooltip\"]').tooltip('show');\n            }, 1000);\n            setTimeout(function() {\n                $message.find('[data-toggle=\"tooltip\"]').tooltip('hide');\n            }, 3000);\n        }\n    }\n\n    /**\n     * Handles the rendering of content after an annotation is posted.\n     *\n     * This function adds a class to the message element, sets an interval to check for an iframe,\n     * and modifies the iframe's background and height properties. It also handles completion tracking.\n     *\n     * @param {Object} annotation - The annotation object containing details about the annotation.\n     * @param {Function} callback - The callback function to be executed if certain conditions are met.\n     * @returns {boolean|Function} - Returns true if the annotation does not require manual completion tracking,\n     *                               otherwise returns the callback function.\n     */\n    postContentRender(annotation, callback) {\n        $(`#message[data-id='${annotation.id}']`).addClass('hascontentbank overflow-hidden');\n        // Get customcss link from the annotation prop.\n        let prop = JSON.parse(annotation.prop);\n        let customcss = prop.customcss;\n        let checkIframe = () => {\n            const iframe = document.querySelector(`#message[data-id='${annotation.id}'] iframe`);\n            if (iframe) {\n                iframe.style.background = 'none';\n                let contentDocument = iframe.contentDocument;\n                let h5p = contentDocument.querySelector('.h5p-initialized');\n                if (h5p) {\n                    $(`#message[data-id='${annotation.id}']`).removeClass('overflow-hidden').find('.loader').remove();\n                    let html = contentDocument.querySelector('html');\n                    html.style.height = 'unset';\n                    // Get the first div element after html body.\n                    let firstdiv = contentDocument.querySelector('body > div');\n                    if (firstdiv) {\n                        firstdiv.style.margin = '0';\n                    }\n                    if (customcss && annotation.char2 == '1') {\n                        let iframeurl = iframe.src;\n                        let fileextension = iframeurl.split('.').pop();\n                        // Inject stylesheet url to iframe head.\n                        let link, node;\n                        if (fileextension == 'html') { // HTML iframe.\n                            link = contentDocument.createElement('link');\n                            node = contentDocument.head;\n                        } else { // H5P iframe.\n                            let h5piframe = contentDocument.querySelector(`#${h5p.id}`);\n                            let h5piframecontent = h5piframe.contentDocument;\n                            link = h5piframecontent.createElement('link');\n                            node = h5piframecontent.head;\n                        }\n                        link.rel = 'stylesheet';\n                        link.type = 'text/css';\n                        link.href = customcss;\n                        node.appendChild(link);\n                    }\n                } else {\n                    requestAnimationFrame(checkIframe);\n                }\n            } else {\n                requestAnimationFrame(checkIframe);\n            }\n        };\n        requestAnimationFrame(checkIframe);\n        if (annotation.hascompletion == 1 && annotation.completiontracking == 'manual'\n            && !annotation.completed && annotation.completiontracking != 'view') {\n            return callback;\n        }\n        return true;\n    }\n\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form object\n     * @param {Event} event The event object\n     * @return {void}\n     */\n    onEditFormLoaded(form, event) {\n        let self = this;\n        self.timepicker({\n            required: true,\n        });\n\n        return {form, event};\n    }\n\n    /**\n     * Applies the content of the annotation.\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    async applyContent(annotation) {\n        const annoid = annotation.id;\n        let self = this;\n        let $message = $(`#message[data-id='${annoid}']`);\n\n        // Remove .modal-dialog-centered class to avoid flickering when H5P content resizes.\n        $message.removeClass('modal-dialog-centered');\n\n        const onPassFail = async(passed, time) => {\n            let label = passed ? 'continue' : 'rewatch';\n            $message.find('#content')\n                .append(`<button class=\"btn btn-${passed ? 'success' : 'danger'} mt-2 btn-rounded\"\n                    id=\"passfail\" data-timestamp=\"${time}\"><i class=\"fa fa-${passed ? 'play' : 'redo'} mr-2\"></i>\n                ${M.util.get_string(label, 'ivplugin_contentbank')}\n                </button>`);\n            $message.find('iframe').addClass('no-pointer-events');\n        };\n\n        $(document).off('click', '#passfail').on('click', '#passfail', function(e) {\n            e.preventDefault();\n            let time = $(this).data('timestamp');\n            self.dispatchEvent('interactionclose', {\n                annotation: annotation,\n            });\n            self.player.seek(time);\n            self.player.play();\n            $(this).remove();\n        });\n\n        /**\n         * Monitors an annotation for xAPI events and updates the UI accordingly.\n         *\n         * @param {Object} annotation - The annotation object to monitor.\n         * @param {string} annotation.id - The ID of the annotation.\n         * @param {string} annotation.completiontracking - The completion tracking type for the annotation.\n         * @param {boolean} annotation.completed - Indicates if the annotation is completed.\n         *\n         * @returns {void}\n         */\n        const xAPICheck = (annotation) => {\n            let H5P;\n\n            const detectAPI = () => {\n                try { // Try to get the H5P object.\n                    H5P = document.querySelector(`#message[data-id='${annoid}'] iframe`).contentWindow.H5P;\n                } catch (e) {\n                    H5P = null;\n                }\n\n                if (typeof H5P !== 'undefined' && H5P !== null) {\n                    if (self.isEditMode()) {\n                        $(`#message[data-id='${annotation.id}'] #title .xapi`).remove();\n                        $(`#message[data-id='${annotation.id}'] #title .btns`)\n                            .prepend(`<div class=\"xapi alert-secondary d-inline px-2 rounded-pill\">\n                            ${M.util.get_string('xapicheck', 'local_ivh5pupload')}</div>`);\n                    }\n                    let statements = [];\n                    try {\n                        H5P.externalDispatcher.on('xAPI', async function(event) {\n                            if (event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered') {\n                                statements.push(event.data.statement);\n                            }\n                            if ((event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered')\n                                && event.data.statement.object.id.indexOf('subContentId') < 0) {\n                                if (self.isEditMode()) {\n                                    $(`#message[data-id='${annotation.id}'] #title .btns .xapi`).remove();\n                                    $(`#message[data-id='${annotation.id}'] #title .btns`)\n                                        .prepend(`<div class=\"xapi alert-success d-inline px-2 rounded-pill\">\n                                        <i class=\"fa fa-check mr-2\"></i>\n                                        ${M.util.get_string('xapieventdetected', 'local_ivh5pupload')}\n                                        </div>`);\n                                    const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n                                    audio.play();\n                                    return;\n                                }\n                                let complete = false;\n                                let textclass = '';\n                                if (annotation.completiontracking == 'completepass'\n                                    && event.data.statement.result && event.data.statement.result.score.scaled >= 0.5) {\n                                    complete = true;\n                                } else if (annotation.completiontracking == 'completefull'\n                                    && event.data.statement.result && event.data.statement.result.score.scaled == 1) {\n                                    complete = true;\n                                } else if (annotation.completiontracking == 'complete') {\n                                    complete = true;\n                                }\n                                if (event.data.statement.result.score.scaled < 0.5) {\n                                    textclass = 'fa fa-check text-danger';\n                                } else if (event.data.statement.result.score.scaled < 1) {\n                                    textclass = 'fa fa-check text-success';\n                                } else {\n                                    textclass = 'bi bi-check2-all text-success';\n                                }\n                                if (complete && !annotation.completed) {\n                                    let details = {};\n                                    const completeTime = new Date();\n                                    let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                                    details.xp = annotation.xp;\n                                    if (annotation.char1 == '1') { // Partial points.\n                                        details.xp = (event.data.statement.result.score.scaled * annotation.xp).toFixed(2);\n                                    }\n                                    details.duration = windowAnno.duration + (completeTime.getTime() - windowAnno.newstarttime);\n                                    details.timecompleted = completeTime.getTime();\n                                    const completiontime = completeTime.toLocaleString();\n                                    let duration = self.formatTime(details.duration / 1000);\n                                    details.reportView = `<span data-toggle=\"tooltip\" data-html=\"true\"\n                     data-title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar mr-2\"></i>\n                     ${completiontime}</span><span><i class=\"bi bi-stopwatch mr-2\"></i>${duration}</span>\n                     <span><i class=\"bi bi-list-check mr-2\"></i>\n                     ${event.data.statement.result.score.raw}/${event.data.statement.result.score.max}</span></span>'>\n                     <i class=\"${textclass}\"></i><br><span>${Number(details.xp)}</span></span>`;\n                                    details.details = statements;\n                                    self.toggleCompletion(annoid, 'mark-done', 'automatic', details);\n                                }\n                                if (annotation.text1 != '') {\n                                    let condition = JSON.parse(annotation.text1);\n                                    if (event.data.statement.result.score.scaled < 0.5) {\n                                        if (condition.gotoonfailed == 1 && condition.forceonfailed != 1) {\n                                            onPassFail(false, condition.timeonfailed);\n                                        } else if (condition.gotoonfailed == 1 && condition.forceonfailed == 1) {\n                                            setTimeout(function() {\n                                                self.dispatchEvent('interactionclose', {\n                                                    annotation: annotation,\n                                                });\n                                                self.player.seek(condition.timeonfailed);\n                                                self.player.play();\n                                            }, 1000);\n                                        }\n                                        if (condition.showtextonfailed == 1 && condition.textonfailed.text != '') {\n                                            let textonfailed = await self.formatContent(condition.textonfailed.text);\n                                            $message.find('.passfail-message').remove();\n                                            $message.find(`#content`)\n                                                .prepend(`<div class=\"alert bg-secondary mt-2 mx-3 passfail-message\">\n                                                                            ${textonfailed}</div>`);\n                                            notifyFilter($('.passfail-message'));\n                                        }\n                                    } else {\n                                        if (condition.gotoonpassing == 1 && condition.forceonpassing != 1) {\n                                            onPassFail(true, condition.timeonpassing);\n                                        } else if (condition.gotoonpassing == 1 && condition.forceonpassing == 1) {\n                                            setTimeout(function() {\n                                                self.dispatchEvent('interactionclose', {\n                                                    annotation: annotation,\n                                                });\n                                                self.player.seek(condition.timeonpassing);\n                                                self.player.play();\n                                            }, 1000);\n                                        }\n                                        if (condition.showtextonpassing == 1 && condition.textonpassing.text != '') {\n                                            let textonpassing = await self.formatContent(condition.textonpassing.text);\n                                            $message.find('.passfail-message').remove();\n                                            $message.find(`#content`)\n                                                .prepend(`<div class=\"alert bg-secondary mt-2 mx-3 passfail-message\">\n                                                                            ${textonpassing}</div>`);\n                                            notifyFilter($('.passfail-message'));\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                    } catch (e) {\n                        requestAnimationFrame(detectAPI);\n                    }\n                } else {\n                    requestAnimationFrame(detectAPI);\n                }\n            };\n\n            requestAnimationFrame(detectAPI);\n        };\n\n        // Apply content.\n        // We don't need to run the render method every time the content is applied. We can cache the content.\n        if (!self.cache[annotation.id] || self.isEditMode()) {\n            self.cache[annotation.id] = await this.render(annotation, 'html');\n        }\n        let data = self.cache[annotation.id];\n        $(`#message[data-id='${annotation.id}'] .modal-body`).attr('id', 'content').html(data).fadeIn(300);\n        if (annotation.hascompletion == 0) {\n            return;\n        }\n        if (!annotation.completed && annotation.completiontracking == 'view') {\n            self.completiononview(annotation);\n            return;\n        }\n        if (annotation.completed) {\n            this.postContentRender(annotation);\n        } else {\n            this.postContentRender(annotation, xAPICheck(annotation));\n        }\n    }\n}"],"names":["H5pUpload","Base","renderContainer","annotation","$message","id","completiontracking","$completiontoggle","find","remove","before","M","util","get_string","completed","setTimeout","tooltip","postContentRender","callback","addClass","customcss","JSON","parse","prop","checkIframe","iframe","document","querySelector","style","background","contentDocument","h5p","removeClass","height","firstdiv","margin","char2","link","node","src","split","pop","createElement","head","h5piframecontent","rel","type","href","appendChild","requestAnimationFrame","hascompletion","onEditFormLoaded","form","event","this","timepicker","required","annoid","self","onPassFail","async","passed","time","label","append","off","on","e","preventDefault","data","dispatchEvent","player","seek","play","cache","isEditMode","render","attr","html","fadeIn","H5P","detectAPI","contentWindow","prepend","statements","externalDispatcher","statement","verb","push","object","indexOf","Audio","cfg","wwwroot","complete","textclass","result","score","scaled","details","completeTime","Date","windowAnno","window","ANNOS","x","xp","char1","toFixed","duration","getTime","newstarttime","timecompleted","completiontime","toLocaleString","formatTime","reportView","raw","max","Number","toggleCompletion","text1","condition","gotoonfailed","forceonfailed","timeonfailed","showtextonfailed","textonfailed","text","formatContent","gotoonpassing","forceonpassing","timeonpassing","showtextonpassing","textonpassing","xAPICheck","completiononview"],"mappings":"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"}