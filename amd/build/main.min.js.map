{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for the H5P Upload plugin.\n *\n * @module     local_ivh5pupload/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Base from 'mod_interactivevideo/type/base';\nexport default class H5pUpload extends Base {\n    /**\n     * Render the container for the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderContainer(annotation) {\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        super.renderContainer(annotation);\n        let $completiontoggle = $message.find('#completiontoggle');\n        $message.find('#title .info').remove();\n        $completiontoggle.before(`<i class=\"bi bi-info-circle-fill mr-2 info\" data-toggle=\"tooltip\"\n            data-container=\"#wrapper\" data-trigger=\"hover\"\n            data-title=\"${M.util.get_string(\"completionon\" + annotation.completiontracking, \"mod_interactivevideo\")}\"></i>`);\n        $message.find('[data-toggle=\"tooltip\"]').tooltip();\n        return $message;\n    }\n\n    /**\n     * Handles the rendering of content after an annotation is posted.\n     *\n     * This function adds a class to the message element, sets an interval to check for an iframe,\n     * and modifies the iframe's background and height properties. It also handles completion tracking.\n     *\n     * @param {Object} annotation - The annotation object containing details about the annotation.\n     * @param {Function} callback - The callback function to be executed if certain conditions are met.\n     * @returns {boolean|Function} - Returns true if the annotation does not require manual completion tracking,\n     *                               otherwise returns the callback function.\n     */\n    postContentRender(annotation, callback) {\n        $(`#message[data-id='${annotation.id}']`).addClass('hascontentbank overflow-hidden');\n        // Get customcss link from the annotation prop.\n        let prop = JSON.parse(annotation.prop);\n        let customcss = prop.customcss;\n        let checkIframe = () => {\n            const iframe = document.querySelector(`#message[data-id='${annotation.id}'] iframe`);\n            if (iframe) {\n                iframe.style.background = 'none';\n                let contentDocument = iframe.contentDocument;\n                let h5p = contentDocument.querySelector('.h5p-initialized');\n                if (h5p) {\n                    $(`#message[data-id='${annotation.id}']`).removeClass('overflow-hidden').find('.loader').remove();\n                    let html = contentDocument.querySelector('html');\n                    html.style.height = 'unset';\n                    if (customcss && annotation.char2 == '1') {\n                        let iframeurl = iframe.src;\n                        let fileextension = iframeurl.split('.').pop();\n                        // Inject stylesheet url to iframe head.\n                        let link, node;\n                        if (fileextension == 'html') { // HTML iframe.\n                            link = contentDocument.createElement('link');\n                            node = contentDocument.head;\n                        } else { // H5P iframe.\n                            let h5piframe = contentDocument.querySelector(`#${h5p.id}`);\n                            let h5piframecontent = h5piframe.contentDocument;\n                            link = h5piframecontent.createElement('link');\n                            node = h5piframecontent.head;\n                        }\n                        link.rel = 'stylesheet';\n                        link.type = 'text/css';\n                        link.href = customcss;\n                        node.appendChild(link);\n                    }\n                } else {\n                    requestAnimationFrame(checkIframe);\n                }\n            } else {\n                requestAnimationFrame(checkIframe);\n            }\n        };\n        requestAnimationFrame(checkIframe);\n        if (annotation.hascompletion == 1 && annotation.completiontracking == 'manual'\n            && !annotation.completed && annotation.completiontracking != 'view') {\n            return callback;\n        }\n        return true;\n    }\n\n    /**\n     * Applies the content of the annotation.\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    async applyContent(annotation) {\n        const annoid = annotation.id;\n        let self = this;\n\n        /**\n         * Monitors an annotation for xAPI events and updates the UI accordingly.\n         *\n         * @param {Object} annotation - The annotation object to monitor.\n         * @param {string} annotation.id - The ID of the annotation.\n         * @param {string} annotation.completiontracking - The completion tracking type for the annotation.\n         * @param {boolean} annotation.completed - Indicates if the annotation is completed.\n         *\n         * @returns {void}\n         */\n        const xAPICheck = (annotation) => {\n            let H5P;\n\n            const detectAPI = () => {\n                try { // Try to get the H5P object.\n                    H5P = document.querySelector(`#message[data-id='${annoid}'] iframe`).contentWindow.H5P;\n                } catch (e) {\n                    H5P = null;\n                }\n\n                if (typeof H5P !== 'undefined' && H5P !== null) {\n                    if (self.isEditMode()) {\n                        $(`#message[data-id='${annotation.id}'] #title .xapi`).remove();\n                        $(`#message[data-id='${annotation.id}'] #title .btns`)\n                            .prepend(`<div class=\"xapi alert-secondary d-inline px-2 rounded-pill\">\n                            ${M.util.get_string('xapicheck', 'local_ivh5pupload')}</div>`);\n                    }\n                    let statements = [];\n                    try {\n                        H5P.externalDispatcher.on('xAPI', function(event) {\n                            if (event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered') {\n                                statements.push(event.data.statement);\n                            }\n                            if ((event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered')\n                                && event.data.statement.object.id.indexOf('subContentId') < 0) {\n                                if (self.isEditMode()) {\n                                    $(`#message[data-id='${annotation.id}'] #title .btns .xapi`).remove();\n                                    $(`#message[data-id='${annotation.id}'] #title .btns`)\n                                        .prepend(`<div class=\"xapi alert-success d-inline px-2 rounded-pill\">\n                                        <i class=\"fa fa-check mr-2\"></i>\n                                        ${M.util.get_string('xapieventdetected', 'local_ivh5pupload')}\n                                        </div>`);\n                                    const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n                                    audio.play();\n                                    return;\n                                }\n                                let complete = false;\n                                let textclass = '';\n                                if (annotation.completiontracking == 'completepass'\n                                    && event.data.statement.result && event.data.statement.result.score.scaled >= 0.5) {\n                                    complete = true;\n                                } else if (annotation.completiontracking == 'completefull'\n                                    && event.data.statement.result && event.data.statement.result.score.scaled == 1) {\n                                    complete = true;\n                                } else if (annotation.completiontracking == 'complete') {\n                                    complete = true;\n                                }\n                                if (event.data.statement.result.score.scaled < 0.5) {\n                                    textclass = 'fa fa-check text-danger';\n                                } else if (event.data.statement.result.score.scaled < 1) {\n                                    textclass = 'fa fa-check text-success';\n                                } else {\n                                    textclass = 'bi bi-check2-all text-success';\n                                }\n                                if (complete && !annotation.completed) {\n                                    let details = {};\n                                    const completeTime = new Date();\n                                    details.xp = annotation.xp;\n                                    if (annotation.char1 == '1') { // Partial points.\n                                        details.xp = (event.data.statement.result.score.scaled * annotation.xp).toFixed(2);\n                                    }\n                                    details.duration = completeTime.getTime() - $('#video-wrapper').data('timestamp');\n                                    details.timecompleted = completeTime.getTime();\n                                    const completiontime = completeTime.toLocaleString();\n                                    let duration = self.formatTime(details.duration / 1000);\n                                    details.reportView = `<span data-toggle=\"tooltip\" data-html=\"true\"\n                     data-title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar mr-2\"></i>\n                     ${completiontime}</span><span><i class=\"bi bi-stopwatch mr-2\"></i>${duration}</span>\n                     <span><i class=\"bi bi-list-check mr-2\"></i>\n                     ${event.data.statement.result.score.raw}/${event.data.statement.result.score.max}</span></span>'>\n                     <i class=\"${textclass}\"></i><br><span>${Number(details.xp)}</span></span>`;\n                                    details.details = statements;\n                                    self.toggleCompletion(annoid, 'mark-done', 'automatic', details);\n                                }\n                            }\n                        });\n                    } catch (e) {\n                        requestAnimationFrame(detectAPI);\n                    }\n                } else {\n                    requestAnimationFrame(detectAPI);\n                }\n            };\n\n            requestAnimationFrame(detectAPI);\n        };\n\n        // Apply content.\n        const data = await this.render(annotation, 'html');\n        $(`#message[data-id='${annotation.id}'] .modal-body`).attr('id', 'content').html(data).fadeIn(300);\n        if (annotation.hascompletion == 0) {\n            return;\n        }\n        if (!annotation.completed && annotation.completiontracking == 'view') {\n            this.toggleCompletion(annotation.id, 'mark-done', 'automatic');\n            return;\n        }\n        if (annotation.completed) {\n            this.postContentRender(annotation);\n        } else {\n            this.postContentRender(annotation, xAPICheck(annotation));\n        }\n    }\n}"],"names":["H5pUpload","Base","renderContainer","annotation","$message","id","$completiontoggle","find","remove","before","M","util","get_string","completiontracking","tooltip","postContentRender","callback","addClass","customcss","JSON","parse","prop","checkIframe","iframe","document","querySelector","style","background","contentDocument","h5p","removeClass","height","char2","link","node","src","split","pop","createElement","head","h5piframecontent","rel","type","href","appendChild","requestAnimationFrame","hascompletion","completed","annoid","self","this","data","render","attr","html","fadeIn","H5P","detectAPI","contentWindow","e","isEditMode","prepend","statements","externalDispatcher","on","event","statement","verb","push","object","indexOf","Audio","cfg","wwwroot","play","complete","textclass","result","score","scaled","details","completeTime","Date","xp","char1","toFixed","duration","getTime","timecompleted","completiontime","toLocaleString","formatTime","reportView","raw","max","Number","toggleCompletion","xAPICheck"],"mappings":"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"}