{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["/* eslint-disable complexity */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for the H5P Upload plugin.\n *\n * @module     local_ivh5pupload/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Base from 'mod_interactivevideo/type/base';\nimport {notifyFilterContentUpdated as notifyFilter} from 'core_filters/events';\nimport Notification from 'core/notification';\n\nexport default class H5pUpload extends Base {\n    /**\n     * Render the container for the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderContainer(annotation) {\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        super.renderContainer(annotation);\n        if (annotation.completiontracking !== 'view') {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $message.find('#title .info').remove();\n            $completiontoggle.before(`<i class=\"bi bi-info-circle-fill mr-2 info\" data-toggle=\"tooltip\"\n            data-container=\"#wrapper\" data-trigger=\"hover\"\n            data-title=\"${M.util.get_string(\"completionon\" + annotation.completiontracking, \"mod_interactivevideo\")}\"></i>`);\n            if (annotation.completed) {\n                return;\n            }\n            setTimeout(function() {\n                $message.find('[data-toggle=\"tooltip\"]').tooltip('show');\n            }, 1000);\n            setTimeout(function() {\n                $message.find('[data-toggle=\"tooltip\"]').tooltip('hide');\n            }, 3000);\n        }\n    }\n\n    /**\n     * Handles the rendering of content after an annotation is posted.\n     *\n     * This function adds a class to the message element, sets an interval to check for an iframe,\n     * and modifies the iframe's background and height properties. It also handles completion tracking.\n     *\n     * @param {Object} annotation - The annotation object containing details about the annotation.\n     * @param {Function} callback - The callback function to be executed if certain conditions are met.\n     * @returns {boolean|Function} - Returns true if the annotation does not require manual completion tracking,\n     *                               otherwise returns the callback function.\n     */\n    postContentRender(annotation, callback) {\n        $(`#message[data-id='${annotation.id}']`).addClass('hascontentbank overflow-hidden');\n        // Get customcss link from the annotation prop.\n        let prop = JSON.parse(annotation.prop);\n        let customcss = prop.customcss;\n        let checkIframe = () => {\n            const iframe = document.querySelector(`#message[data-id='${annotation.id}'] iframe`);\n            if (iframe) {\n                iframe.style.background = 'none';\n                let contentDocument = iframe.contentDocument;\n                let h5p = contentDocument.querySelector('.h5p-initialized');\n                if (h5p) {\n                    $(`#message[data-id='${annotation.id}']`).removeClass('overflow-hidden').find('.loader').remove();\n                    let html = contentDocument.querySelector('html');\n                    html.style.height = 'unset';\n                    // Get the first div element after html body.\n                    let firstdiv = contentDocument.querySelector('body > div');\n                    if (firstdiv) {\n                        firstdiv.style.margin = '0';\n                    }\n                    if (customcss && annotation.char2 == '1') {\n                        let iframeurl = iframe.src;\n                        let fileextension = iframeurl.split('.').pop();\n                        // Inject stylesheet url to iframe head.\n                        let link, node;\n                        if (fileextension == 'html') { // HTML iframe.\n                            link = contentDocument.createElement('link');\n                            node = contentDocument.head;\n                        } else { // H5P iframe.\n                            let h5piframe = contentDocument.querySelector(`#${h5p.id}`);\n                            let h5piframecontent = h5piframe.contentDocument;\n                            link = h5piframecontent.createElement('link');\n                            node = h5piframecontent.head;\n                        }\n                        link.rel = 'stylesheet';\n                        link.type = 'text/css';\n                        link.href = customcss;\n                        node.appendChild(link);\n                    }\n                } else {\n                    requestAnimationFrame(checkIframe);\n                }\n            } else {\n                requestAnimationFrame(checkIframe);\n            }\n        };\n        requestAnimationFrame(checkIframe);\n        if (annotation.hascompletion == 1 && annotation.completiontracking == 'manual'\n            && !annotation.completed && annotation.completiontracking != 'view') {\n            return callback;\n        }\n        return true;\n    }\n\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form object\n     * @param {Event} event The event object\n     * @return {void}\n     */\n    onEditFormLoaded(form, event) {\n        let self = this;\n        self.timepicker({\n            required: true,\n        });\n\n        return {form, event};\n    }\n\n    /**\n     * Apply the content to the annotation\n     * @param {Object} annotation The annotation object\n     * @param {Object} existingstate The existing state of the annotation\n     * @returns {Promise<void>} - Returns a promise that resolves when the content is applied.\n     * @override\n     */\n    async applyContent(annotation, existingstate) {\n        let self = this;\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        // Remove .modal-dialog-centered class to avoid flickering when H5P content resizes.\n        $message.removeClass('modal-dialog-centered');\n\n        let annoid = annotation.id;\n\n        const onPassFail = async(passed, time) => {\n            let label = passed ? 'continue' : 'rewatch';\n            $message.find('#content')\n                .append(`<button class=\"btn btn-${passed ? 'success' : 'danger'} mt-2 btn-rounded\"\n                        id=\"passfail\" data-timestamp=\"${time}\"><i class=\"fa fa-${passed ? 'play' : 'redo'} mr-2\"></i>\n                    ${M.util.get_string(label, 'ivplugin_contentbank')}\n                    </button>`);\n            $message.find('iframe').addClass('no-pointer-events');\n        };\n\n        $(document).off('click', '#passfail').on('click', '#passfail', function(e) {\n            e.preventDefault();\n            let time = $(this).data('timestamp');\n            self.dispatchEvent('interactionclose', {\n                annotation: annotation,\n            });\n            self.player.seek(time);\n            self.player.play();\n            $(this).remove();\n        });\n\n        let saveState = 0;\n        let condition = null;\n        if (annotation.text1 != '' && annotation.text1 !== null) {\n            condition = JSON.parse(annotation.text1);\n        }\n\n        if (JSON.parse(annotation.advanced).savecurrentstate == 1) {\n            saveState = 1;\n        }\n\n        const afterLog = async(log) => {\n            const xAPICheck = (annotation) => {\n                const detectH5P = () => {\n                    let H5P;\n                    try { // Try to get the H5P object.\n                        H5P = document.querySelector(`#message[data-id='${annoid}'] iframe`).contentWindow.H5P;\n                    } catch (e) {\n                        H5P = null;\n                    }\n                    if (typeof H5P !== 'undefined' && H5P !== null) {\n                        if (H5P.externalDispatcher === undefined) {\n                            requestAnimationFrame(detectH5P);\n                            return;\n                        }\n                        if (document.querySelector(`#message[data-id='${annoid}'] iframe`)\n                            .contentWindow.H5PIntegration === undefined) {\n                            requestAnimationFrame(detectH5P);\n                            return;\n                        }\n\n                        if (self.isEditMode()) {\n                            $message.find(`#title .btns .xapi`).remove();\n                            $message.find(`#title .btns`)\n                                .prepend(`<div class=\"xapi alert-secondary px-2\n                             rounded-pill\">${M.util.get_string('xapicheck', 'ivplugin_contentbank')}</div>`);\n                        }\n\n                        window.H5PIntegration = document.querySelector(`#message[data-id='${annoid}'] iframe`)\n                            .contentWindow.H5PIntegration;\n                        window.H5PIntegration = window.H5PIntegration || {};\n                        window.H5PIntegration.saveFreq = 1;\n                        let content = window.H5PIntegration.contents;\n                        let id = Object.keys(content)[0];\n                        if (existingstate !== null && existingstate !== undefined) {\n                            log = existingstate;\n                        }\n                        window.H5PIntegration.contents[id].contentUserData = {};\n                        window.H5PIntegration.contents[id].contentUserData[0] = {};\n                        window.H5PIntegration.contents[id].contentUserData[0].state = log;\n                        window.H5P = H5P;\n                        if (annotation.completed) {\n                            return;\n                        }\n                        try {\n                            H5P.externalDispatcher.on('xAPI', async function(event) {\n                                let statement = event.data.statement;\n                                if ((statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                    || statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered')\n                                    && statement.object.id.indexOf('subContentId') < 0\n                                    && !statement.context.contextActivities.parent) {\n                                    if (self.isEditMode()) {\n                                        $(`#message[data-id='${annotation.id}'] #title .btns .xapi`).remove();\n                                        $(`#message[data-id='${annotation.id}'] #title .btns`)\n                                            .prepend(`<div class=\"xapi alert-success d-inline px-2 rounded-pill\">\n                                                        <i class=\"fa fa-check mr-2\"></i>\n                                                        ${M.util.get_string('xapieventdetected', 'ivplugin_contentbank')}\n                                                    </div>`);\n                                        const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n                                        audio.play();\n                                        return;\n                                    }\n                                    let complete = false;\n                                    let textclass = '';\n                                    let result = statement.result;\n                                    if (annotation.completiontracking == 'completepass' && result && result.score.scaled >= 0.5) {\n                                        complete = true;\n                                    } else if (annotation.completiontracking == 'completefull'\n                                        && result && result.score.scaled == 1) {\n                                        complete = true;\n                                    } else if (annotation.completiontracking == 'complete') {\n                                        complete = true;\n                                    }\n                                    if (result.score.scaled < 0.5) {\n                                        textclass = 'fa fa-check text-danger';\n                                    } else if (result.score.scaled < 1) {\n                                        textclass = 'fa fa-check text-success';\n                                    } else {\n                                        textclass = 'bi bi-check2-all text-success';\n                                    }\n                                    if (complete && !annotation.completed) {\n                                        let details = {};\n                                        const completeTime = new Date();\n                                        let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                                        details.xp = annotation.xp;\n                                        if (annotation.char1 == '1') { // Partial points.\n                                            details.xp = (result.score.scaled * annotation.xp).toFixed(2);\n                                        }\n                                        details.duration = windowAnno.duration + (completeTime.getTime() - windowAnno.newstarttime);\n                                        details.timecompleted = completeTime.getTime();\n                                        const completiontime = completeTime.toLocaleString();\n                                        let duration = self.formatTime(details.duration / 1000);\n                                        details.reportView = `<span data-toggle=\"tooltip\" data-html=\"true\"\n                         data-title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar mr-2\"></i>\n                         ${completiontime}</span><span><i class=\"bi bi-stopwatch mr-2\"></i>${duration}</span>\n                         <span><i class=\"bi bi-list-check mr-2\"></i>\n                         ${result.score.raw}/${result.score.max}</span></span>'>\n                         <i class=\"${textclass}\"></i><br><span>${Number(details.xp)}</span></span>`;\n                                        details.details = saveState == 1 ?\n                                            window.H5PIntegration.contents[id].contentUserData[0].state : '';\n                                        // Must wait 1.5 seconds or so to let the saveState finish.\n                                        // Otherwise, the completion will be incomplete.\n                                        setTimeout(function() {\n                                            self.toggleCompletion(annoid, 'mark-done', 'automatic', details);\n                                        }, 1500);\n                                    }\n\n                                    if (condition !== null) {\n                                        if (result.score.scaled < 0.5) {\n                                            if (condition.gotoonfailed == 1 && condition.forceonfailed != 1) {\n                                                onPassFail(false, condition.timeonfailed);\n                                            } else if (condition.gotoonfailed == 1 && condition.forceonfailed == 1) {\n                                                setTimeout(function() {\n                                                    self.dispatchEvent('interactionclose', {\n                                                        annotation: annotation,\n                                                    });\n                                                    self.player.seek(condition.timeonfailed);\n                                                    self.player.play();\n                                                }, 1000);\n                                            }\n                                            if (condition.showtextonfailed == 1 && condition.textonfailed.text != '') {\n                                                let textonfailed = await self.formatContent(condition.textonfailed.text);\n                                                $message.find('.passfail-message').remove();\n                                                $message.find(`#content`)\n                                                    .prepend(`<div class=\"alert bg-secondary mt-2 mx-3 passfail-message\">\n                                                ${textonfailed}</div>`);\n                                                notifyFilter($('.passfail-message'));\n                                            }\n                                        } else {\n                                            if (condition.gotoonpassing == 1 && condition.forceonpassing != 1) {\n                                                onPassFail(true, condition.timeonpassing);\n                                            } else if (condition.gotoonpassing == 1 && condition.forceonpassing == 1) {\n                                                setTimeout(function() {\n                                                    self.dispatchEvent('interactionclose', {\n                                                        annotation: annotation,\n                                                    });\n                                                    self.player.seek(condition.timeonpassing);\n                                                    self.player.play();\n                                                }, 1000);\n                                            }\n                                            if (condition.showtextonpassing == 1 && condition.textonpassing.text != '') {\n                                                let textonpassing = await self.formatContent(condition.textonpassing.text);\n                                                $message.find('.passfail-message').remove();\n                                                $message.find(`#content`)\n                                                    .prepend(`<div class=\"alert bg-secondary mt-2 mx-3 passfail-message\">\n                                                ${textonpassing}</div>`);\n                                                notifyFilter($('.passfail-message'));\n                                            }\n                                        }\n                                    }\n                                }\n                            });\n                        } catch (e) {\n                            requestAnimationFrame(detectH5P);\n                        }\n                    } else {\n                        requestAnimationFrame(detectH5P);\n                    }\n                };\n                requestAnimationFrame(detectH5P);\n            };\n            // We don't need to run the render method every time the content is applied. We can cache the content.\n            let firstview = false;\n            if (!self.cache[annotation.id] || self.isEditMode()) {\n                self.cache[annotation.id] = await self.render(annotation);\n                firstview = true;\n            }\n            const data = self.cache[annotation.id];\n\n            $message.find(`.modal-body`).html(data).attr('id', 'content').fadeIn(300);\n\n            self.postContentRender(annotation, xAPICheck(annotation));\n\n            if (existingstate !== null && existingstate !== undefined) {\n                return;\n            }\n\n            if (self.isEditMode()) {\n                return;\n            }\n\n            // If annotation is incomplete, we want to save the state when the interaction is closed.\n            if (!annotation.completed && firstview && saveState == 1) {\n                $(document).on('interactionclose interactionrefresh', async function(e) {\n                    if (e.detail.annotation.id == annotation.id) {\n                        try {\n                            let content = window.H5PIntegration.contents;\n                            let id = Object.keys(content)[0];\n                            let contentuserData = window.H5PIntegration.contents[id].contentUserData[0];\n                            let state = contentuserData.state;\n                            await self.saveLog(annotation, {\n                                text1: JSON.stringify(state),\n                                char1: annotation.type,\n                            }, self.userid, true);\n                        } catch (e) {\n                            window.console.log('Error: ', e);\n                        }\n                    }\n                });\n            }\n            if (annotation.hascompletion != 1) {\n                return;\n            }\n            if (!annotation.completed && annotation.completiontracking == 'view') {\n                self.completiononview(annotation);\n            }\n        };\n\n        if (existingstate !== null && existingstate !== undefined) { // Report view.\n            afterLog(existingstate);\n            return;\n        }\n\n        // Get exiting state.\n        if (self.isEditMode()) {\n            afterLog('');\n            return;\n        }\n        if (saveState !== 1) {\n            afterLog('');\n            return;\n        }\n        let logs = await self.getLogs(annotation, [self.userid]);\n        let log = '';\n        if (logs.length <= 0) {\n            afterLog('');\n            return;\n        }\n        if (logs.length > 0) {\n            log = JSON.parse(logs[0].text1);\n            // Show a confirmation message if the state is not empty.\n            if (log !== '' && log !== null) {\n                Notification.saveCancel(\n                    M.util.get_string('resume', 'ivplugin_contentbank'),\n                    M.util.get_string('resumeconfirm', 'ivplugin_contentbank'),\n                    M.util.get_string('resume', 'ivplugin_contentbank'),\n                    function() {\n                        // Do nothing.\n                        afterLog(log);\n                    },\n                    function() {\n                        log = '';\n                        afterLog(log);\n                    }\n                );\n            } else {\n                afterLog(log);\n            }\n        }\n    }\n\n    async getCompletionData(annotation, userid) {\n        let logs = await this.getLogs(annotation, [userid]);\n        let log = '';\n        if (logs.length > 0) {\n            log = JSON.parse(logs[0].text1);\n        }\n        annotation.displayoptions = 'popup';\n        annotation.hascompletion = 0;\n        annotation.completed = true;\n        await this.renderViewer(annotation);\n        this.renderContainer(annotation);\n        this.applyContent(annotation, log);\n        return log;\n    }\n}"],"names":["H5pUpload","Base","renderContainer","annotation","$message","id","completiontracking","$completiontoggle","find","remove","before","M","util","get_string","completed","setTimeout","tooltip","postContentRender","callback","addClass","customcss","JSON","parse","prop","checkIframe","iframe","document","querySelector","style","background","contentDocument","h5p","removeClass","height","firstdiv","margin","char2","link","node","src","split","pop","createElement","head","h5piframecontent","rel","type","href","appendChild","requestAnimationFrame","hascompletion","onEditFormLoaded","form","event","this","timepicker","required","existingstate","self","annoid","onPassFail","async","passed","time","label","append","off","on","e","preventDefault","data","dispatchEvent","player","seek","play","saveState","condition","text1","advanced","savecurrentstate","afterLog","firstview","cache","isEditMode","render","html","attr","fadeIn","detectH5P","H5P","contentWindow","undefined","externalDispatcher","H5PIntegration","prepend","window","saveFreq","content","contents","Object","keys","log","contentUserData","state","statement","verb","object","indexOf","context","contextActivities","parent","Audio","cfg","wwwroot","complete","textclass","result","score","scaled","details","completeTime","Date","windowAnno","ANNOS","x","xp","char1","toFixed","duration","getTime","newstarttime","timecompleted","completiontime","toLocaleString","formatTime","reportView","raw","max","Number","toggleCompletion","gotoonfailed","forceonfailed","timeonfailed","showtextonfailed","textonfailed","text","formatContent","gotoonpassing","forceonpassing","timeonpassing","showtextonpassing","textonpassing","xAPICheck","detail","saveLog","stringify","userid","console","completiononview","logs","getLogs","length","saveCancel","displayoptions","renderViewer","applyContent"],"mappings":"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"}